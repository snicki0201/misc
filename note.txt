
// MFCApplication5Dlg.cpp : implementation file
//

#include "stdafx.h"
#include "MFCApplication5.h"
#include "MFCApplication5Dlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMFCApplication5Dlg dialog



CMFCApplication5Dlg::CMFCApplication5Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MFCAPPLICATION5_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CMFCApplication5Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CMFCApplication5Dlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_CTLCOLOR()
END_MESSAGE_MAP()


// CMFCApplication5Dlg message handlers

BOOL CMFCApplication5Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here

	return TRUE;  // return TRUE  unless you set the focus to a control
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CMFCApplication5Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();

		CClientDC dc(this);

		CPen*	pOldPen;
		CPen	penDraw;

		penDraw.CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
		pOldPen = dc.SelectObject(&penDraw);

		dc.MoveTo(0, 0);
		dc.LineTo(100, 100);

		dc.SelectObject(pOldPen);

		HANDLE hBitMap = ::LoadImage(0, _T("d:\\job\\taishoku1.bmp"), IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
		CBitmap bmSmile;
		bmSmile.Attach((HBITMAP)hBitMap);

		BITMAP bmInfo;
		bmSmile.GetObject(sizeof(bmInfo), &bmInfo);

		CDC dcCompatible;
		dcCompatible.CreateCompatibleDC(&dc);

		CBitmap* pOld = dcCompatible.SelectObject(&bmSmile);

		dc.BitBlt( 0,  0, bmInfo.bmWidth, bmInfo.bmHeight, &dcCompatible, 0, 0, SRCCOPY);

		BLENDFUNCTION bf;
		bf.BlendOp = AC_SRC_OVER;
		bf.BlendFlags = 0;
		bf.AlphaFormat = 0;
		bf.SourceConstantAlpha = 128;

		dc.AlphaBlend(50, 50, bmInfo.bmWidth, bmInfo.bmHeight, &dcCompatible, 0, 0, bmInfo.bmWidth, bmInfo.bmHeight, bf);

		dcCompatible.SelectObject(pOld);

		dc.SetBkMode(TRANSPARENT);

		CFont myFont;
		LOGFONT lf;

		memset(&lf, 0, sizeof(lf));
		lf.lfHeight = 32;
		_tcscpy_s(lf.lfFaceName, _T("メイリオ"));

		myFont.CreateFontIndirect(&lf);

		dc.SelectObject(&myFont);

		dc.TextOut(20, 120, _T("てすとです。テストです。"));

		CWnd *pWnd = this->GetDlgItem(IDC_STATIC);
		pWnd->GetDC()->SetBkMode(TRANSPARENT);
		pWnd->GetDC()->SetTextColor(RGB(0, 255, 0));
		pWnd->Invalidate();
		pWnd->UpdateWindow();
	}
}

// The system calls this function to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CMFCApplication5Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



HBRUSH CMFCApplication5Dlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)
{
	HBRUSH hbr = CDialogEx::OnCtlColor(pDC, pWnd, nCtlColor);

	switch (nCtlColor) {
	case CTLCOLOR_STATIC:
		switch (pWnd->GetDlgCtrlID()) {
		case IDC_STATIC:
			;
			pDC->SetBkMode(TRANSPARENT);
			pDC->SetTextColor(RGB(0, 255, 0));
		}
	}

	return hbr;
}
